
from flask import Flask, request, session, redirect, url_for, send_from_directory, render_template
import os, json, random
import pandas as pd
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash

BASE_DIR = os.path.dirname(__file__)
SITE_DIR = os.path.join(BASE_DIR, 'site')
USERS_FILE = os.path.join(BASE_DIR, 'users.json')
EXCEL_FILE = os.path.join(BASE_DIR, 'Sample Assessment questions.xlsx')

app = Flask(__name__, static_folder=None, template_folder='templates')
app.secret_key = 'replace-this-with-a-secure-secret'

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE) as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE,'w') as f:
        json.dump(users, f)

def load_questions():
    df = pd.read_excel(EXCEL_FILE)
    questions = []
    for _, row in df.iterrows():
        opts = []
        for col, code in zip(["Option A","Option B","Option C","Option D"], ["FAR","BM","CRM","MO"]):
            if pd.notna(row[col]):
                opts.append({"text": row[col], "code": code})
        questions.append({
            "No": int(row["No"]),
            "Scenario": row["Scenario"],
            "Options": opts,
            "Category": row["Categories/Attributes"]
        })
    return questions

@app.route('/')
def index():
    return send_from_directory(SITE_DIR, 'index.html')

@app.route('/login', methods=['GET','POST'])
def login():
    users = load_users()
    if request.method == 'POST':
        email = request.form.get('email','').lower().strip()
        password = request.form.get('password','')
        next_url = request.form.get('next') or request.args.get('next') or '/assessment'
        user = users.get(email)
        if user and check_password_hash(user['password'], password):
            session['logged_in'] = True
            session['user'] = {'email': email, 'name': user.get('name')}
            return redirect(next_url)
        if email == 'admin' and password == 'admin':
            session['logged_in'] = True
            session['user'] = {'email':'admin','name':'Administrator'}
            return redirect(next_url)
        return redirect('/login?error=1' + (f"&next={next_url}" if next_url else ""))
    return send_from_directory(SITE_DIR, 'login.html')

@app.route('/signup', methods=['POST'])
def signup():
    users = load_users()
    name = request.form.get('name','').strip()
    email = request.form.get('email','').lower().strip()
    password = request.form.get('password','')
    confirm = request.form.get('confirm_password','')
    next_url = request.form.get('next') or request.args.get('next') or '/assessment'
    if not email or not password or password != confirm:
        return redirect('/login?error_signup=1' + (f"&next={next_url}" if next_url else ""))
    if email in users:
        return redirect('/login?error_exists=1' + (f"&next={next_url}" if next_url else ""))
    users[email] = {'name': name or email.split('@')[0], 'password': generate_password_hash(password)}
    save_users(users)
    session['logged_in'] = True
    session['user'] = {'email': email, 'name': users[email]['name']}
    return redirect(next_url)

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

@app.route('/assessment')
def assessment():
    if not session.get('logged_in'):
        return redirect(url_for('login', next='/assessment'))
    # timer check
    if 'assessment_start' not in session:
        session['assessment_start'] = datetime.utcnow().isoformat()
        # shuffle questions and store
        qs = load_questions()
        random.shuffle(qs)
        for q in qs:
            random.shuffle(q['Options'])
        session['questions'] = qs
    else:
        start = datetime.fromisoformat(session['assessment_start'])
        if datetime.utcnow() - start > timedelta(minutes=30):
            session.clear()
            return redirect(url_for('login', next='/assessment', timeout=1))
        qs = session.get('questions', load_questions())
    return render_template('assessment.html', questions=qs)

@app.route('/submit', methods=['POST'])
def submit():
    if not session.get('logged_in'):
        return redirect(url_for('login', next='/assessment'))
    start = session.get('assessment_start')
    if not start:
        return redirect('/assessment')
    start = datetime.fromisoformat(start)
    if datetime.utcnow() - start > timedelta(minutes=30):
        session.clear()
        return redirect(url_for('login', next='/assessment', timeout=1))

    qs = session.get('questions', [])
    answers = request.form
    scores = {}
    for q in qs:
        key = f"q{q['No']}"
        val = answers.get(key)
        if val:
            scores[val] = scores.get(val,0)+1
    strongest = max(scores, key=scores.get) if scores else None
    session['results'] = {'scores': scores, 'strongest': strongest}
    return redirect('/results')

@app.route('/results')
def results():
    if not session.get('logged_in'):
        return redirect(url_for('login', next='/assessment'))
    res = session.get('results')
    if not res:
        return "No results yet."
    return render_template('results.html', results=res['scores'], strongest=res['strongest'])

@app.route('/<path:filename>')
def static_files(filename):
    safe_path = os.path.join(SITE_DIR, filename)
    if os.path.exists(safe_path) and os.path.commonpath([os.path.abspath(safe_path), SITE_DIR]) == os.path.abspath(SITE_DIR):
        return send_from_directory(SITE_DIR, filename)
    return "Not Found", 404

if __name__ == '__main__':
    print('Run: python app.py')
    app.run(debug=True, host='0.0.0.0')
